import { axiosInstance } from '../lib/axios';

// ============ TYPE DEFINITIONS ============
export interface Objective {
  id: string;
  ownerId: string;
  title: string;
  description: string;
  weight: number;
  dueDate: string;
  parentId?: string;
  visibility: 'PUBLIC' | 'TEAM' | 'PRIVATE';
  status: 'DRAFT' | 'ACTIVE' | 'AT_RISK' | 'ON_TRACK' | 'COMPLETED' | 'CANCELED' | 'ARCHIVED';
  progress: number;
  confidence: 'LOW' | 'MEDIUM' | 'HIGH';
  blockers?: string;
  evidenceLinks?: string[];
  tags?: string[];
  template?: string;
  discussInNextOneOnOne: boolean;
  lastCheckInAt?: string;
  completedAt?: string;
  createdAt: string;
  updatedAt: string;
  owner?: any;
  parent?: Objective;
  children?: Objective[];
}

export interface ObjectiveMilestone {
  id: string;
  objectiveId: string;
  title: string;
  acceptanceCriteria?: string;
  dueDate: string;
  weight: number;
  progress: number;
  evidenceUrls?: string[];
  orderIndex: number;
  isCompleted: boolean;
  completedAt?: string;
}

export interface Action {
  id: string;
  ownerId: string;
  sourceType: 'ONE_ON_ONE' | 'OBJECTIVE' | 'REVIEW' | 'FEEDBACK' | 'MANUAL';
  sourceId?: string;
  title: string;
  description?: string;
  dueDate: string;
  status: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELED';
  notes?: string;
  assignedBy?: string;
  tags?: string[];
  priority: number;
  completedAt?: string;
  createdAt: string;
  owner?: any;
}

export interface OneOnOne {
  id: string;
  employeeId: string;
  managerId: string;
  scheduledAt: string;
  durationMinutes: number;
  status: 'SCHEDULED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELED' | 'RESCHEDULED';
  notes?: string;
  employeeNotes?: string;
  managerNotes?: string;
  startedAt?: string;
  completedAt?: string;
  agendaItems?: OneOnOneAgendaItem[];
  decisions?: { decision: string; owner: string; dueDate?: string }[];
  topics?: string[];
  location?: string;
  employee?: any;
  manager?: any;
}

export interface OneOnOneAgendaItem {
  id: string;
  oneOnOneId: string;
  type: 'OBJECTIVE' | 'ACTION' | 'WELLBEING' | 'FEEDBACK' | 'RECOGNITION' | 'CUSTOM' | 'WINS' | 'BLOCKERS' | 'CAREER' | 'COACHING';
  refId?: string;
  title: string;
  description?: string;
  orderIndex: number;
  status: 'PENDING' | 'DISCUSSED' | 'DEFERRED' | 'CONVERTED_TO_ACTION';
  isAutoGenerated: boolean;
  notes?: string;
}

export interface Feedback {
  id: string;
  fromUserId: string;
  toUserId: string;
  type: 'PRIVATE' | 'PUBLIC' | 'PEER' | 'UPWARD' | 'REQUESTED';
  text: string;
  tags?: string[];
  values?: string[];
  visibility: string;
  isAnonymous: boolean;
  addToNextOneOnOne: boolean;
  isRead: boolean;
  readAt?: string;
  createdAt: string;
  fromUser?: any;
  toUser?: any;
}

export interface Recognition {
  id: string;
  fromUserId: string;
  toUserId: string;
  badge: 'CUSTOMER_FIRST' | 'INNOVATION' | 'TEAM_PLAYER' | 'OWNERSHIP' | 'CRAFT_EXCELLENCE' | 'EFFECTIVE_COMMUNICATOR' | 'CONTINUOUS_GROWTH' | 'PROBLEM_SOLVER' | 'LEADERSHIP' | 'ABOVE_AND_BEYOND';
  text: string;
  isPublic: boolean;
  values?: string[];
  reactions: number;
  createdAt: string;
  fromUser?: any;
  toUser?: any;
}

export interface WellbeingCheck {
  id: string;
  userId: string;
  happiness: number;
  motivation: number;
  workLifeBalance: number;
  comment?: string;
  visibility: string;
  concerns?: string[];
  positives?: string[];
  requestsSupport: boolean;
  supportNeeded?: string;
  flaggedForReview: boolean;
  createdAt: string;
}

export interface ReviewCycle {
  id: string;
  name: string;
  type: 'QUARTERLY' | 'MID_YEAR' | 'ANNUAL' | 'PROBATION' | 'CUSTOM';
  periodStart: string;
  periodEnd: string;
  selfReviewStartDate: string;
  selfReviewEndDate: string;
  managerReviewStartDate: string;
  managerReviewEndDate: string;
  status: string;
  enablePeerReviews: boolean;
  linkToCompensation: boolean;
  config: any;
  createdAt: string;
}

export interface ReviewForm {
  id: string;
  cycleId: string;
  userId: string;
  reviewerId: string;
  type: 'SELF' | 'MANAGER' | 'PEER' | 'UPWARD';
  status: 'NOT_STARTED' | 'DRAFT' | 'SUBMITTED' | 'CALIBRATED' | 'PUBLISHED';
  sections: any;
  overallRating?: number;
  overallComments?: string;
  strengths?: string;
  areasForImprovement?: string;
  submittedAt?: string;
}

export interface Nudge {
  id: string;
  userId: string;
  type: string;
  title: string;
  message: string;
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  status: 'PENDING' | 'SENT' | 'VIEWED' | 'ACTED_ON' | 'DISMISSED' | 'EXPIRED';
  actions?: { label: string; url: string; action: string }[];
  createdAt: string;
}

// ============ API SERVICE ============
export const performanceEnhancedService = {
  // ============ OBJECTIVES ============
  objectives: {
    getAll: async (filters?: { ownerId?: string; status?: string; alignedTo?: string }) => {
      const response = await axiosInstance.get('/performance-enhanced/objectives', { params: filters });
      return response.data as Objective[];
    },

    getById: async (id: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/objectives/${id}`);
      return response.data as Objective;
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/objectives', data);
      return response.data as Objective;
    },

    update: async (id: string, data: any) => {
      const response = await axiosInstance.patch(`/performance-enhanced/objectives/${id}`, data);
      return response.data as Objective;
    },

    delete: async (id: string) => {
      const response = await axiosInstance.delete(`/performance-enhanced/objectives/${id}`);
      return response.data;
    },

    checkIn: async (id: string, data: { progress: number; confidence: string; blockers?: string; evidenceLinks?: string[]; discussInNextOneOnOne?: boolean }) => {
      const response = await axiosInstance.post(`/performance-enhanced/objectives/${id}/check-in`, data);
      return response.data as Objective;
    },

    activate: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/objectives/${id}/activate`);
      return response.data as Objective;
    },

    getMilestones: async (objectiveId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/objectives/${objectiveId}/milestones`);
      return response.data as ObjectiveMilestone[];
    },

    createMilestone: async (objectiveId: string, data: any) => {
      const response = await axiosInstance.post(`/performance-enhanced/objectives/${objectiveId}/milestones`, data);
      return response.data as ObjectiveMilestone;
    },
  },

  // ============ ACTIONS ============
  actions: {
    getAll: async (filters?: { ownerId?: string; status?: string; sourceType?: string }) => {
      const response = await axiosInstance.get('/performance-enhanced/actions', { params: filters });
      return response.data as Action[];
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/actions', data);
      return response.data as Action;
    },

    update: async (id: string, data: any) => {
      const response = await axiosInstance.patch(`/performance-enhanced/actions/${id}`, data);
      return response.data as Action;
    },

    bulkComplete: async (actionIds: string[]) => {
      const response = await axiosInstance.post('/performance-enhanced/actions/bulk-complete', { actionIds });
      return response.data;
    },
  },

  // ============ 1:1s ============
  oneOnOnes: {
    getAll: async (filters?: { employeeId?: string; managerId?: string; status?: string }) => {
      const response = await axiosInstance.get('/performance-enhanced/one-on-ones', { params: filters });
      return response.data as OneOnOne[];
    },

    getById: async (id: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/one-on-ones/${id}`);
      return response.data as OneOnOne;
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/one-on-ones', data);
      return response.data as OneOnOne;
    },

    update: async (id: string, data: any) => {
      const response = await axiosInstance.patch(`/performance-enhanced/one-on-ones/${id}`, data);
      return response.data as OneOnOne;
    },

    complete: async (id: string, data: { notes?: string; decisions?: any[] }) => {
      const response = await axiosInstance.post(`/performance-enhanced/one-on-ones/${id}/complete`, data);
      return response.data as OneOnOne;
    },

    generateAgenda: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/one-on-ones/${id}/generate-agenda`);
      return response.data;
    },

    addAgendaItem: async (oneOnOneId: string, data: any) => {
      const response = await axiosInstance.post(`/performance-enhanced/one-on-ones/${oneOnOneId}/agenda-items`, data);
      return response.data as OneOnOneAgendaItem;
    },
  },

  // ============ FEEDBACK ============
  feedback: {
    getAll: async (filters?: { toUserId?: string; fromUserId?: string }) => {
      const response = await axiosInstance.get('/performance-enhanced/feedback', { params: filters });
      return response.data as Feedback[];
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/feedback', data);
      return response.data as Feedback;
    },

    markAsRead: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/feedback/${id}/read`);
      return response.data;
    },
  },

  // ============ RECOGNITION ============
  recognition: {
    getAll: async (userId?: string) => {
      const response = await axiosInstance.get('/performance-enhanced/recognition', { params: { userId } });
      return response.data as Recognition[];
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/recognition', data);
      return response.data as Recognition;
    },

    addReaction: async (id: string, emoji: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/recognition/${id}/reactions`, { emoji });
      return response.data;
    },
  },

  // ============ WELLBEING ============
  wellbeing: {
    getChecks: async (userId: string, limit = 10) => {
      const response = await axiosInstance.get('/performance-enhanced/wellbeing', { params: { userId, limit } });
      return response.data as WellbeingCheck[];
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/wellbeing', data);
      return response.data as WellbeingCheck;
    },

    getTrend: async (userId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/wellbeing/${userId}/trend`);
      return response.data;
    },

    respondToCheck: async (id: string, response: string) => {
      const res = await axiosInstance.post(`/performance-enhanced/wellbeing/${id}/respond`, { response });
      return res.data;
    },
  },

  // ============ REVIEW CYCLES ============
  reviewCycles: {
    getAll: async () => {
      const response = await axiosInstance.get('/performance-enhanced/review-cycles');
      return response.data as ReviewCycle[];
    },

    getById: async (id: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/review-cycles/${id}`);
      return response.data as ReviewCycle;
    },

    create: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/review-cycles', data);
      return response.data as ReviewCycle;
    },

    publish: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/review-cycles/${id}/publish`);
      return response.data as ReviewCycle;
    },

    getMyForms: async (cycleId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/review-cycles/${cycleId}/my-forms`);
      return response.data as ReviewForm[];
    },
  },

  // ============ REVIEW FORMS ============
  reviewForms: {
    getById: async (id: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/review-forms/${id}`);
      return response.data as ReviewForm;
    },

    save: async (id: string, data: any) => {
      const response = await axiosInstance.patch(`/performance-enhanced/review-forms/${id}`, data);
      return response.data as ReviewForm;
    },

    submit: async (id: string, data: any) => {
      const response = await axiosInstance.post(`/performance-enhanced/review-forms/${id}/submit`, data);
      return response.data as ReviewForm;
    },
  },

  // ============ CALIBRATION ============
  calibration: {
    getRecords: async (cycleId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/calibration/${cycleId}`);
      return response.data;
    },

    calibrateEmployee: async (data: any) => {
      const response = await axiosInstance.post('/performance-enhanced/calibration', data);
      return response.data;
    },

    batchCalibrate: async (cycleId: string, calibrations: any[]) => {
      const response = await axiosInstance.post('/performance-enhanced/calibration/batch', { cycleId, calibrations });
      return response.data;
    },
  },

  // ============ DASHBOARDS ============
  dashboards: {
    getEmployeeDashboard: async (userId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/dashboard/employee/${userId}`);
      return response.data;
    },

    getManagerDashboard: async (managerId: string) => {
      const response = await axiosInstance.get(`/performance-enhanced/dashboard/manager/${managerId}`);
      return response.data;
    },

    getOrgDashboard: async () => {
      const response = await axiosInstance.get('/performance-enhanced/dashboard/org');
      return response.data;
    },
  },

  // ============ NUDGES ============
  nudges: {
    getMine: async () => {
      const response = await axiosInstance.get('/performance-enhanced/nudges/me');
      return response.data as Nudge[];
    },

    dismiss: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/nudges/${id}/dismiss`);
      return response.data;
    },

    markViewed: async (id: string) => {
      const response = await axiosInstance.post(`/performance-enhanced/nudges/${id}/viewed`);
      return response.data;
    },
  },

  // ============ COMPETENCIES ============
  competencies: {
    getAll: async () => {
      const response = await axiosInstance.get('/performance-enhanced/competencies');
      return response.data;
    },
  },
};
